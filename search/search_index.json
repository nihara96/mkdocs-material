{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":"<p>Indexify is a an open source data framework featuring a real-time extraction engine and pre-built extraction adapters. Out of the box reliable extraction for every form of unstructured data(documents, presentation, videos and audio).</p>"},{"location":"#authentication","title":"Authentication","text":"<p>All API endpoints are authenticated using Bearer tokens and picked up from the specification file.</p> <pre><code>\"security\": [\n  {\n    \"bearerAuth\": []\n  }\n]\n</code></pre>"},{"location":"generated/","title":"Client","text":""},{"location":"generated/#function-generate_unique_hex_id","title":"Function: <code>generate_unique_hex_id</code>","text":"<p>Arguments: </p> <p>Description:</p> <p>Generate a unique hexadecimal identifier</p> <p>Returns:     str: a unique hexadecimal string</p>"},{"location":"generated/#function-generate_hash_from_string","title":"Function: <code>generate_hash_from_string</code>","text":"<p>Arguments: input_string</p> <p>Description:</p> <p>Generate a hash for the given string and return it as a hexadecimal string.</p> <p>Args:     input_string (str): The input string to hash.</p> <p>Returns:     str: The hexadecimal hash of the input string.</p>"},{"location":"generated/#class-sqlqueryresult","title":"Class: <code>SqlQueryResult</code>","text":"<p>Description:</p> <p>None</p>"},{"location":"generated/#class-indexifyclient","title":"Class: <code>IndexifyClient</code>","text":"<p>Description:</p> <p>IndexifyClient is the main entry point for the SDK. For the full list of client features, see the httpx Client documentation.</p> <p>:param service_url: The URL of the Indexify service to connect to. :param args: Arguments to pass to the httpx.Client constructor :param kwargs: Keyword arguments to pass to the httpx.Client constructor</p> <p>Example usage: <pre><code>from indexify import IndexifyClient\n\nclient = IndexifyClient()\nassert client.heartbeat() == True\n</code></pre></p>"},{"location":"generated/#function-with_mtls","title":"Function: <code>with_mtls</code>","text":"<p>Arguments: cls, cert_path, key_path, ca_bundle_path, service_url</p> <p>Description:</p> <p>Create a client with mutual TLS authentication. Also enables HTTP/2, which is required for mTLS. NOTE: mTLS must be enabled on the Indexify service for this to work.</p> <p>:param cert_path: Path to the client certificate. Resolution handled by httpx. :param key_path: Path to the client key. Resolution handled by httpx. :param args: Arguments to pass to the httpx.Client constructor :param kwargs: Keyword arguments to pass to the httpx.Client constructor :return: A client with mTLS authentication</p> <p>Example usage: <pre><code>from indexify import IndexifyClient\n\nclient = IndexifyClient.with_mtls(\n    cert_path=\"/path/to/cert.pem\",\n    key_path=\"/path/to/key.pem\",\n)\nassert client.heartbeat() == True\n</code></pre></p>"},{"location":"generated/#function-get","title":"Function: <code>get</code>","text":"<p>Arguments: self, endpoint</p> <p>Description:</p> <p>Make a GET request to the Indexify service.</p> <p>:param endpoint: The endpoint to make the request to.</p> <p>Example usage: <pre><code>from indexify import IndexifyClient\n\nclient = IndexifyClient()\nresponse = client.get(\"namespaces\")\nprint(response.json())\n</code></pre></p>"},{"location":"generated/#function-post","title":"Function: <code>post</code>","text":"<p>Arguments: self, endpoint</p> <p>Description:</p> <p>Make a POST request to the Indexify service.</p> <p>:param endpoint: The endpoint to make the request to.</p> <p>Example usage:</p> <pre><code>from indexify import IndexifyClient\n\nclient = IndexifyClient()\nresponse = client.post(\"namespaces\", json={\"name\": \"my-repo\"})\nprint(response.json())\n</code></pre>"},{"location":"generated/#function-put","title":"Function: <code>put</code>","text":"<p>Arguments: self, endpoint</p> <p>Description:</p> <p>Make a PUT request to the Indexify service.</p> <p>:param endpoint: The endpoint to make the request to.</p> <p>Example usage:</p> <pre><code>from indexify import IndexifyClient\n\nclient = IndexifyClient()\nresponse = client.put(\"namespaces\", json={\"name\": \"my-repo\"})\nprint(response.json())\n</code></pre>"},{"location":"generated/#function-delete","title":"Function: <code>delete</code>","text":"<p>Arguments: self, endpoint</p> <p>Description:</p> <p>Make a DELETE request to the Indexify service.</p> <p>:param endpoint: The endpoint to make the request to.</p> <p>Example usage:</p> <pre><code>from indexify import IndexifyClient\n\nclient = IndexifyClient()\nresponse = client.delete(\"namespaces\")\nprint(response.json())\n</code></pre>"},{"location":"generated/#function-close","title":"Function: <code>close</code>","text":"<p>Arguments: self</p> <p>Description:</p> <p>Close the underlying httpx.Client.</p>"},{"location":"generated/#function-heartbeat","title":"Function: <code>heartbeat</code>","text":"<p>Arguments: self, heartbeat_response</p> <p>Description:</p> <p>Check if the Indexify service is alive.</p>"},{"location":"generated/#function-namespaces","title":"Function: <code>namespaces</code>","text":"<p>Arguments: self</p> <p>Description:</p> <p>Get a list of all namespaces.</p>"},{"location":"generated/#function-create_namespace","title":"Function: <code>create_namespace</code>","text":"<p>Arguments: self, namespace, extraction_graphs, labels, service_url</p> <p>Description:</p> <p>Create a new namespace.</p> <p>Returns:     IndexifyClient: a new client with the given namespace</p>"},{"location":"generated/#function-indexes","title":"Function: <code>indexes</code>","text":"<p>Arguments: self</p> <p>Description:</p> <p>Get the indexes of the current namespace.</p> <p>Returns:     List[Index]: list of indexes in the current namespace</p>"},{"location":"generated/#function-extractors","title":"Function: <code>extractors</code>","text":"<p>Arguments: self</p> <p>Description:</p> <p>Get a list of all extractors.</p> <p>Returns:     List[Extractor]: list of extractors</p>"},{"location":"generated/#function-get_extraction_graphs","title":"Function: <code>get_extraction_graphs</code>","text":"<p>Arguments: self</p> <p>Description:</p> <p>Retrieve and update the list of extraction policies for the current namespace.</p>"},{"location":"generated/#function-create_extraction_graph","title":"Function: <code>create_extraction_graph</code>","text":"<p>Arguments: self, extraction_graph</p> <p>Description:</p> <p>Create a new extraction graph.</p> <p>Args:     - extraction_graph (ExtractionGraph): the extraction graph to create</p>"},{"location":"generated/#function-get_content_metadata","title":"Function: <code>get_content_metadata</code>","text":"<p>Arguments: self, content_id</p> <p>Description:</p> <p>Get metadata for a specific content ID in a given index.</p> <p>Args:     - content_id (str): content id to query</p>"},{"location":"generated/#function-download_content","title":"Function: <code>download_content</code>","text":"<p>Arguments: self, id</p> <p>Description:</p> <p>Download content from id. Return bytes</p> <p>Args:     - id (str): id of content to download</p>"},{"location":"generated/#function-add_documents","title":"Function: <code>add_documents</code>","text":"<p>Arguments: self, extraction_graphs, documents, doc_id</p> <p>Description:</p> <p>Add documents to current namespace.</p> <p>Args:     - documents (Union[Document, str, List[Union[Document, str]]]): this can be a list of strings, list of Documents or a mix of both</p>"},{"location":"generated/#function-delete_documents","title":"Function: <code>delete_documents</code>","text":"<p>Arguments: self, document_ids</p> <p>Description:</p> <p>Delete documents from current namespace.</p> <p>Args:     - document_ids (List[str]): list of document ids to delete</p>"},{"location":"generated/#function-update_labels","title":"Function: <code>update_labels</code>","text":"<p>Arguments: self, document_id, labels</p> <p>Description:</p> <p>Update labels for a document.</p> <p>Args:     - document_id (str): id of document to update     - labels (Dict[str, str]): labels to update</p>"},{"location":"generated/#function-update_content","title":"Function: <code>update_content</code>","text":"<p>Arguments: self, document_id, path</p> <p>Description:</p> <p>Update a piece of content with a new file</p> <p>Args:     - path (str): relative path to the file to be uploaded</p>"},{"location":"generated/#function-get_structured_data","title":"Function: <code>get_structured_data</code>","text":"<p>Arguments: self, content_id</p> <p>Description:</p> <p>Query metadata for a specific content ID in a given index.</p> <p>Args:     - content_id (str): content id to query</p>"},{"location":"generated/#function-search_index","title":"Function: <code>search_index</code>","text":"<p>Arguments: self, name, query, top_k, filters</p> <p>Description:</p> <p>Search index in the current namespace.</p> <p>Args:     - name (str): name of index to search     - query (str): query string     - top_k (int): top k nearest neighbors to be returned     - filters (List[str]): list of filters to apply</p>"},{"location":"generated/#function-upload_file","title":"Function: <code>upload_file</code>","text":"<p>Arguments: self, extraction_graphs, path, id, labels</p> <p>Description:</p> <p>Upload a file.</p> <p>Args:     - path (str): relative path to the file to be uploaded     - labels (dict): labels to be associated with the file</p>"},{"location":"generated/#function-list_schemas","title":"Function: <code>list_schemas</code>","text":"<p>Arguments: self</p> <p>Description:</p> <p>List all schemas in the current namespace.</p>"},{"location":"generated/#function-get_content_tree","title":"Function: <code>get_content_tree</code>","text":"<p>Arguments: self, content_id</p> <p>Description:</p> <p>Get content tree for a given content id</p> <p>Args:     - content_id (str): id of content</p>"},{"location":"generated/#function-get_extracted_content","title":"Function: <code>get_extracted_content</code>","text":"<p>Arguments: self, content_id, level</p> <p>Description:</p> <p>Get list of child for a given content id and their content up to the specified level.</p> <p>Args: - content_id (str): id of content - level (int): depth of content retrieval (default: 0)</p>"},{"location":"generated/#function-sql_query","title":"Function: <code>sql_query</code>","text":"<p>Arguments: self, query</p> <p>Description:</p> <p>Execute a SQL query.</p> <p>Args:     - query (str): SQL query to be executed</p>"},{"location":"generated/#function-ingest_remote_file","title":"Function: <code>ingest_remote_file</code>","text":"<p>Arguments: self, extraction_graphs, url, mime_type, labels, id</p> <p>Description:</p> <p>None</p>"},{"location":"generated/#function-wait_for_extraction","title":"Function: <code>wait_for_extraction</code>","text":"<p>Arguments: self, content_id</p> <p>Description:</p> <p>Wait for extraction to complete for a given content id</p> <p>Args:     - content_id (str): id of content</p>"},{"location":"generated/#function-generate_unique_hex_id_1","title":"Function: <code>generate_unique_hex_id</code>","text":"<p>Arguments: self</p> <p>Description:</p> <p>Generate a unique hexadecimal identifier</p> <p>Returns:     str: a unique hexadecimal string</p>"},{"location":"generated/#function-generate_hash_from_string_1","title":"Function: <code>generate_hash_from_string</code>","text":"<p>Arguments: self, input_string</p> <p>Description:</p> <p>Generate a hash for the given string and return it as a hexadecimal string.</p> <p>Args:     input_string (str): The input string to hash.</p> <p>Returns:     str: The hexadecimal hash of the input string.</p>"},{"location":"redocly/","title":"API Documentation","text":""}]}